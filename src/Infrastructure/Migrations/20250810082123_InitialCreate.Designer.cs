// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250810082123_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Domain.Entities.CantonRuleSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JsonRules")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CantonRuleSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Canton = "ZH",
                            JsonRules = "{\"canton\":\"ZH\",\"year\":2025,\"deductions\":{\"pillar3a_max\":7400,\"commute\":{\"max\":3000,\"per_km\":0.7,\"method\":\"car|public\"},\"lunch_allowance_per_day\":15,\"home_office_max\":1500,\"childcare_max\":10000},\"quellensteuer\":{\"tables\":[]},\"cantonal_multipliers_note\":\"Use MunicipalityMultiplier table to compute communal tax.\"}",
                            Year = 2025
                        });
                });

            modelBuilder.Entity("Domain.Entities.MunicipalityMultiplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Multiplier")
                        .HasColumnType("numeric");

                    b.Property<string>("MunicipalityCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MunicipalityMultipliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Canton = "ZH",
                            Multiplier = 1.19m,
                            MunicipalityCode = "261",
                            Year = 2025
                        });
                });

            modelBuilder.Entity("Domain.Entities.TaxBracketCantonal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BracketsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CantonalBrackets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BracketsJson = "[{\"up_to\":30000,\"rate\":0.01},{\"up_to\":60000,\"rate\":0.025},{\"up_to\":100000,\"rate\":0.04}]",
                            Canton = "ZH",
                            Year = 2025
                        });
                });

            modelBuilder.Entity("Domain.Entities.TaxBracketFederal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BracketsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FederalBrackets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BracketsJson = "[{\"up_to\":30000,\"rate\":0.02},{\"up_to\":60000,\"rate\":0.05},{\"up_to\":100000,\"rate\":0.08}]",
                            Year = 2025
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Domain.Entities.ApiKey", b =>
                {
                    b.HasOne("Domain.Entities.Tenant", "Tenant")
                        .WithMany("ApiKeys")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Domain.Entities.Tenant", b =>
                {
                    b.Navigation("ApiKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
